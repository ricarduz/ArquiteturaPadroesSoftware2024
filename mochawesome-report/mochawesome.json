{
  "stats": {
    "suites": 6,
    "tests": 12,
    "passes": 11,
    "pending": 0,
    "failures": 1,
    "start": "2025-01-12T22:15:56.626Z",
    "end": "2025-01-12T22:15:56.690Z",
    "duration": 64,
    "testsRegistered": 12,
    "passPercent": 91.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "203488c2-0528-46ec-bfb8-955ff4562661",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b9434421-4b50-4350-9be1-7811ec05ae67",
          "title": "Teste de Produtos",
          "fullFile": "C:\\Users\\ricar\\activity-provider\\tests\\index.test.js",
          "file": "\\tests\\index.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a4a8c620-6a7e-4984-9c4b-5735925fb158",
              "title": "Produtos",
              "fullFile": "C:\\Users\\ricar\\activity-provider\\tests\\index.test.js",
              "file": "\\tests\\index.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve criar e executar uma atividade de Gestão de Stock",
                  "fullTitle": "Teste de Produtos Produtos Deve criar e executar uma atividade de Gestão de Stock",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const atividade = new GestaoDeStock(\n  \"Gestão de Stocks\",\n  \"Descrição teste\",\n  100\n);\nassert.strictEqual(atividade.name, \"Gestão de Stocks\");\nassert.strictEqual(atividade.stockLevel, 100);\natividade.execute();",
                  "err": {},
                  "uuid": "7d26c9e8-e956-4fa7-82b3-57a3eb757507",
                  "parentUUID": "a4a8c620-6a7e-4984-9c4b-5735925fb158",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar e executar uma atividade de Organização de Prateleiras",
                  "fullTitle": "Teste de Produtos Produtos Deve criar e executar uma atividade de Organização de Prateleiras",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const atividade = new OrganizacaoDePrateleiras(\n  \"Organização de Prateleiras\",\n  \"Descrição teste\",\n  \"Layout Inicial\"\n);\nassert.strictEqual(atividade.name, \"Organização de Prateleiras\");\nassert.strictEqual(atividade.shelfLayout, \"Layout Inicial\");\natividade.execute();",
                  "err": {},
                  "uuid": "bb67d71d-4b6c-455f-a2a8-b09160a65492",
                  "parentUUID": "a4a8c620-6a7e-4984-9c4b-5735925fb158",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d26c9e8-e956-4fa7-82b3-57a3eb757507",
                "bb67d71d-4b6c-455f-a2a8-b09160a65492"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "783643fd-90ae-40dc-9466-1ecca542d0a5",
              "title": "Factory",
              "fullFile": "C:\\Users\\ricar\\activity-provider\\tests\\index.test.js",
              "file": "\\tests\\index.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve criar uma atividade através do Gestão de Stock",
                  "fullTitle": "Teste de Produtos Factory Deve criar uma atividade através do Gestão de Stock",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const factory = new GestaoDeStockFactory();\nconst atividade = factory.createActivity({\n  name: \"Teste\",\n  description: \"Teste descrição\",\n  stockLevel: 50,\n});\nassert.strictEqual(atividade.stockLevel, 50);",
                  "err": {},
                  "uuid": "c487fea5-648a-4e2d-a9d5-d840a956260b",
                  "parentUUID": "783643fd-90ae-40dc-9466-1ecca542d0a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar uma atividade através do Organização de Prateleiras",
                  "fullTitle": "Teste de Produtos Factory Deve criar uma atividade através do Organização de Prateleiras",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const factory = new OrganizacaoDePrateleirasFactory();\nconst atividade = factory.createActivity({\n  name: \"Teste\",\n  description: \"Teste descrição\",\n  shelfLayout: \"Layout Teste\",\n});\nassert.strictEqual(atividade.shelfLayout, \"Layout Teste\");",
                  "err": {},
                  "uuid": "128df099-8268-46a0-9065-5f17bb876561",
                  "parentUUID": "783643fd-90ae-40dc-9466-1ecca542d0a5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c487fea5-648a-4e2d-a9d5-d840a956260b",
                "128df099-8268-46a0-9065-5f17bb876561"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4a205488-4e48-4079-a094-4e5a7173424c",
          "title": "Testes do Endpoint /deploy",
          "fullFile": "C:\\Users\\ricar\\activity-provider\\tests\\index.test.js",
          "file": "\\tests\\index.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve criar uma atividade de Gestão de Stock com sucesso",
              "fullTitle": "Testes do Endpoint /deploy Deve criar uma atividade de Gestão de Stock com sucesso",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n  .post(\"/deploy\")\n  .send({\n    activityType: \"GestaoDeStock\",\n    name: \"Teste Gestão de Stock\",\n    description: \"Descrição da atividade de gestão de stock\",\n    params: { stockLevel: 100 },\n  });\nassert.strictEqual(response.status, 200);\nassert.strictEqual(response.body.activityDetails.name, \"Teste Gestão de Stock\");\nassert.strictEqual(response.body.activityDetails.stockLevel, 100);",
              "err": {},
              "uuid": "e1c13df8-6c41-4718-8a15-c6e65b75df29",
              "parentUUID": "4a205488-4e48-4079-a094-4e5a7173424c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve criar uma atividade de Organização de Prateleiras com sucesso",
              "fullTitle": "Testes do Endpoint /deploy Deve criar uma atividade de Organização de Prateleiras com sucesso",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n  .post(\"/deploy\")\n  .send({\n    activityType: \"OrganizacaoDePrateleiras\",\n    name: \"Teste Organização de Prateleiras\",\n    description: \"Descrição da atividade de organização de prateleiras\",\n    params: { shelfLayout: \"Layout Inicial\" },\n  });\nassert.strictEqual(response.status, 200);\nassert.strictEqual(response.body.activityDetails.name, \"Teste Organização de Prateleiras\");\nassert.strictEqual(response.body.activityDetails.shelfLayout, \"Layout Inicial\");",
              "err": {},
              "uuid": "f819c5aa-4e9f-4c98-941a-d16ccddd783e",
              "parentUUID": "4a205488-4e48-4079-a094-4e5a7173424c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar erro ao enviar parâmetros inválidos",
              "fullTitle": "Testes do Endpoint /deploy Deve retornar erro ao enviar parâmetros inválidos",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n  .post(\"/deploy\")\n  .send({\n    activityType: \"TipoInvalido\",\n    name: \"Atividade Invalida\",\n    description: \"Teste com tipo inválido\",\n    params: {},\n  });\nassert.strictEqual(response.status, 400);\nassert.ok(response.body.error);",
              "err": {},
              "uuid": "a23f43e7-050d-4a67-8a9e-67d05ad6ed8e",
              "parentUUID": "4a205488-4e48-4079-a094-4e5a7173424c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e1c13df8-6c41-4718-8a15-c6e65b75df29",
            "f819c5aa-4e9f-4c98-941a-d16ccddd783e",
            "a23f43e7-050d-4a67-8a9e-67d05ad6ed8e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 40,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2d745a17-bb50-446b-baab-4339e363878a",
          "title": "Testes do Endpoint /config",
          "fullFile": "C:\\Users\\ricar\\activity-provider\\tests\\index.test.js",
          "file": "\\tests\\index.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve retornar os parâmetros adaptados com sucesso",
              "fullTitle": "Testes do Endpoint /config Deve retornar os parâmetros adaptados com sucesso",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app).get(\"/config/adapted\");\nassert.strictEqual(response.status, 200);\nassert.strictEqual(response.body.stockLevel, 100);\nassert.strictEqual(response.body.salesGoal, 200);\nassert.strictEqual(response.body.campaignDuration, 7);\nassert.strictEqual(response.body.scenarioDescription, \"Campanha de Natal\");",
              "err": {},
              "uuid": "00c47750-76bf-478e-899f-9c05f00587d3",
              "parentUUID": "2d745a17-bb50-446b-baab-4339e363878a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar erro ao enviar parâmetros inválidos para POST /config",
              "fullTitle": "Testes do Endpoint /config Deve retornar erro ao enviar parâmetros inválidos para POST /config",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app).post(\"/config\").send({\n  nivel_stock_inicial: \"invalido\",\n  objetivo_vendas: \"invalido\",\n  duracao_campanha: \"invalido\",\n  descricao_cenario: 12345,\n});\nassert.strictEqual(response.status, 400);\nassert.ok(response.text.includes(\"Erro\"));",
              "err": {},
              "uuid": "2509a727-4c85-4e73-a23a-5959c6d76c30",
              "parentUUID": "2d745a17-bb50-446b-baab-4339e363878a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00c47750-76bf-478e-899f-9c05f00587d3",
            "2509a727-4c85-4e73-a23a-5959c6d76c30"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "028ea1cb-f9f7-42fe-ae96-d141c7c3cd56",
          "title": "Testes das Estratégias de Análise",
          "fullFile": "C:\\Users\\ricar\\activity-provider\\tests\\index.test.js",
          "file": "\\tests\\index.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve calcular a média de performance corretamente",
              "fullTitle": "Testes das Estratégias de Análise Deve calcular a média de performance corretamente",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const strategy = new PerformanceAverageStrategy();\nconst data = [85, 90, 95];\nconst result = strategy.execute(data);\nassert.strictEqual(result, 90);",
              "err": {},
              "uuid": "b61a539d-1d82-4f83-8bd2-777afd91ec4a",
              "parentUUID": "028ea1cb-f9f7-42fe-ae96-d141c7c3cd56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve identificar corretamente as ruturas de stock frequentes",
              "fullTitle": "Testes das Estratégias de Análise Deve identificar corretamente as ruturas de stock frequentes",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const strategy = new FrequentStockBreaksStrategy();\nconst data = [\n  { stockLevel: 0 },\n  { stockLevel: 10 },\n  { stockLevel: 0 },\n  { stockLevel: 20 },\n  { stockLevel: 0 },\n];\nconst result = strategy.execute(data);\nassert.strictEqual(result, 3);",
              "err": {},
              "uuid": "518810dc-d970-4ab2-90e1-255659a87dc6",
              "parentUUID": "028ea1cb-f9f7-42fe-ae96-d141c7c3cd56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve classificar corretamente o desempenho geral",
              "fullTitle": "Testes das Estratégias de Análise Deve classificar corretamente o desempenho geral",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const strategy = new GeneralPerformanceClassificationStrategy();\nconst data = [85, 90, 95];\nconst result = strategy.execute(data);\nassert.strictEqual(result, \"Excelente\");",
              "err": {
                "message": "AssertionError: Expected values to be strictly equal:\n\n'Bom' !== 'Excelente'\n",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\n'Bom' !== 'Excelente'\n\n    at Context.<anonymous> (tests\\index.test.js:166:12)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- Bom\n+ Excelente\n"
              },
              "uuid": "83638b0f-4eec-4f15-b21b-a9ab3abc9dd9",
              "parentUUID": "028ea1cb-f9f7-42fe-ae96-d141c7c3cd56",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b61a539d-1d82-4f83-8bd2-777afd91ec4a",
            "518810dc-d970-4ab2-90e1-255659a87dc6"
          ],
          "failures": [
            "83638b0f-4eec-4f15-b21b-a9ab3abc9dd9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "reportFilename": "mochawesome"
      },
      "version": "6.2.0"
    }
  }
}